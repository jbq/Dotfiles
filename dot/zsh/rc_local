################################################################################
# File:          rc_local
# Author:        Jean-Baptiste Quenot
# Purpose:       Define site dependent shell aliases
# Date Created:  2002-01-29 15:14:16
# CVS Id:        $Id: rc_local 1086 2004-11-10 21:10:05Z jbq $
################################################################################

UNAME=$(uname -s)

# Remove extra info (Cygwin)
UNAME=${UNAME%%_*}

test "$UNAME" = "FreeBSD" && alias ls='ls -G'
# On Linux, use color only if standard output is connected to a terminal
test "$UNAME" = "Linux" && alias ls='ls --color=auto'

if test "$UNAME" = "Darwin" ; then
    if test "$(/usr/bin/which ls)" = "/bin/ls" ; then
        # BSD ls
        alias ls='ls -G'
    else
        # GNU ls in /sw/bin or /usr/local/bin
        alias ls='ls --color'
    fi
fi

have() {
    type $* >&/dev/null
}

have gimp-1.3 && alias gimp='gimp-1.3'
have gimp-remote-1.3 && alias gimp-remote='gimp-remote-1.3'
have gnome-open && alias open='gnome-open'

have bc		&& alias bc='bc -q' # Shut up, bc!
have screen	&& alias s=screen
have git	&& alias gg="git gui&; disown %git"

# I often mistype commands :)
alias amke='make'
alias c='cd'
alias cim='vim'
alias d='cd'
alias dc='cd'
alias ehco='echo'
alias ecoh='echo'
alias greo='grep'
alias grpe='grep'
alias lll='ll'
alias lzqq='less'
alias les='less'
alias mak='make'
alias maek='make'
alias mkae='make'
alias poing='ping'
alias pnig='ping'
alias pgr='pgrep'
alias rehash='hash -r'
alias tai='tail'
alias tali='tail'
alias tial='tail'
alias vmi='vim'
alias gvmi='gvim'
alias vp='cp'
alias v=vir

# aliases
flop () {
    drive=$1
    FLOPPY=
    test -d /$drive && FLOPPY=/$drive
    test -d /mnt/$drive && FLOPPY=/mnt/$drive

    # Removable devices may need to be reloaded on FreeBSD 5.x
    #test "${OSTYPE%%.*}" = "freebsd5" && sudo /etc/rc.d/devfs restart

    if sudo mount $FLOPPY 2> /dev/null ; then
        echo $drive mounted
	for script in $FLOPPY/*.sh ; do
		sh $script start
	done
    else
	for script in $FLOPPY/*.sh ; do
		sh $script stop
	done
        if sudo umount $FLOPPY 2> /dev/null ; then
            echo $drive unmounted
        else
            echo Cannot mount nor unmount $drive.  Please insert $drive if not
            echo present, and close all files opened on the media if already inserted.
        fi
    fi
}
alias flip=flop

have mysql && alias mysql='mysql -uroot -p'
have mysqladmin && alias mysqladmin='mysqladmin -uroot -p'
have mysqldump && alias mysqldump='mysqldump -uroot -p'

# If current shell is not a login shell or an ssh connection...
# ssh output must be empty at startup -- see rsync(1) DIAGNOSTICS for details
# test "$0" = "${0#-}" -a ! -n "$SSH_CLIENT" && cat /etc/motd

red () {
	echo '[1;31m'$1'[0;m'
}

green () {
	echo '[1;32m'$1'[0;m'
}

blue () {
	echo '[1;34m'$1'[0;m'
}

# On Linux, screen refuses to accept backspace when launched with TERM=xterm-color
# On FreeBSD, screen refuses to accept backspace when launched with TERM=xterm
# Falling back to vt220 for use with Eterm
have screen && alias screen='TERM=vt220 screen'
# Falling back to 'linux' for use with Gnome Terminal
# Causes problems on Linux in mutt and vim
#alias screen='TERM=linux screen'

#have screen && complete -F _screen -o default s

# On Linux, disable bitmapped fonts for onscreen rendering
#have xset && (
#    if test -n "$DISPLAY" -a "$UNAME" = "Linux" ; then
#        xset -fp "/usr/lib/X11/fonts/Type1" 2>/dev/null
#        xset fp rehash
#    fi
#)

if have mixer ; then
    test -f /dev/dsp1.0 && alias mixer='mixer -f /dev/dsp1.0'
    test -f /dev/dsp0.0 && alias mixer='mixer -f /dev/dsp0.0'
fi
#have portupgrade && alias portupgrade='portupgrade -p'
have man && alias man='PAGER=view-manpage man'
if have git ; then
	alias gg='git gui'
	alias gpr='git pull --rebase'
	alias gps='git push'
	alias gitcommit='git commit'
fi
have tig && alias ts='tig status'
alias tf='tail -f'
alias bubbrosc='python /usr/local/share/bubbros/display/Client.py -d pygame --fullscreen=yes'

# Thanks to Phil! Gregory
# http://aperiodic.net/phil/prompt/
. $USER_DOTFILES/zsh/prompt.sh

# The following lines were added by compinstall

zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=** r:|=**'
zstyle :compinstall filename "$HOME/.zshrc"

autoload -U compinit
compinit
# End of lines added by compinstall

#zmodload -i zsh/parameter
#
#didaprecmd()
#{
#  psvar[1]=$#jobstates;
#  if [[ $psvar[1] -eq 0 ]] then
#    psvar[1]=()
#  elif [[ $psvar[1] -eq 1 ]] then
#    psvar[1]="$psvar[1] job"
#  else
#    psvar[1]="$psvar[1] jobs"
#  fi
#  [[ -n $TTY && $TERM == (xterm*|dtterm|rxvt|screen*) ]] &&
#    {
#      print -nP "\e]1;%m:%.\x07"
#      print -nP "\e]2;%(1v. %1v |.)${WINTITLE:+ $WINTITLE |} %n@%m - %~ | %y"
#      [[ $TERM == screen* ]] && print -n .
#      print -n "\x07"
#    } > $TTY
#}
#
#TRAPCLD() { [[ -o interactive && -n $TTY ]] && didaprecmd }

if test -r $HOME/.ssh/known_hosts ; then
	hosts=(${${${(f)"$(<$HOME/.ssh/known_hosts)"}%%\ *}%%,*})
	zstyle ':completion:*:hosts' hosts $hosts 
fi

# Add some useful readline bindings to the vi mode: best of both worlds :)
bindkey "^A" vi-beginning-of-line
bindkey "^E" vi-end-of-line
bindkey "^K" vi-kill-eol
#bindkey "^R" vi-history-search-backward
bindkey "^R" history-incremental-search-backward

autoload -U zkbd

if test -f ~/.zkbd/$TERM-$VENDOR-$OSTYPE; then
    source ~/.zkbd/$TERM-$VENDOR-$OSTYPE
fi

[[ -n ${key[Home]} ]] && bindkey "${key[Home]}" beginning-of-line
[[ -n ${key[End]} ]] && bindkey "${key[End]}" end-of-line
[[ -n ${key[Delete]} ]] && bindkey "${key[Delete]}" delete-char
[[ -n ${key[Insert]} ]] && bindkey "${key[Insert]}" overwrite-mode
[[ -n ${key[PageUp]} ]] && bindkey "${key[PageUp]}" beginning-of-buffer-or-history
[[ -n ${key[PageDown]} ]] && bindkey "${key[PageDown]}" end-of-buffer-or-history
[[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-history

# cd completion will never select the parent directory
zstyle ':completion:*:cd:*' ignore-parents parent pwd

# Enable zsh completion cache
zstyle ':completion:*' use-cache 

# Show git current branch http://www.jukie.net/~bart/blog/20071219221358
typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions

setopt prompt_subst

export __CURRENT_GIT_BRANCH=
export __CURRENT_GIT_VARS_INVALID=1

zsh_git_invalidate_vars() {
    export __CURRENT_GIT_VARS_INVALID=1
}

zsh_git_compute_vars() {
    export __CURRENT_GIT_BRANCH="$(parse_git_branch)"
    export __CURRENT_GIT_VARS_INVALID=
}

parse_git_branch() {
    git branch --no-color 2> /dev/null \
    | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1 /'
}

chpwd_functions+='zsh_git_chpwd_update_vars'
zsh_git_chpwd_update_vars() {
    zsh_git_invalidate_vars
}

preexec_functions+='zsh_git_preexec_update_vars'
zsh_git_preexec_update_vars() {
    case "$(history $HISTCMD)" in 
	*git*) zsh_git_invalidate_vars ;;
    esac
}

get_git_prompt_info() {
    test -n "$__CURRENT_GIT_VARS_INVALID" && zsh_git_compute_vars
    echo $__CURRENT_GIT_BRANCH
}

function grisbi() {
    open -a XQuartz
    ip=$(ifconfig en0 | grep inet | awk '$1=="inet" {print $2}')
    xhost + $ip
    docker run -u $(id -u) -ti --rm \
        -e DISPLAY=$ip:0 \
        -e HOME=/home \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME:/home \
        grisbi
}

# vim:ft=zsh
